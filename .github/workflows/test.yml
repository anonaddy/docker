name: test

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Prepare
        id: prepare
        run: |
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::anonaddy
          echo ::set-output name=running_timeout::120
          echo ::set-output name=running_log_check::ready to handle connections
      -
        name: Checkout
        uses: actions/checkout@v2.3.1
      -
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3.1.0
      -
        name: Docker Buildx
        run: |
          docker buildx build --load --tag ${{ steps.prepare.outputs.build_tag }} --file Dockerfile .
      -
        name: Create network
        run: |
          docker network create -d bridge ${{ steps.prepare.outputs.container_name }}
      -
        name: Start MariaDB container
        run: |
          docker run -d --name mariadb --hostname mariadb \
            --network ${{ steps.prepare.outputs.container_name }} \
            -e "MYSQL_ALLOW_EMPTY_PASSWORD=yes" \
            -e "MYSQL_DATABASE=anonaddy" \
            -e "MYSQL_USER=anonaddy" \
            -e "MYSQL_PASSWORD=anonaddy" \
            mariadb:10.4
      -
        name: Start container
        run: |
          docker run -d --name ${{ steps.prepare.outputs.container_name }} \
            --link mariadb \
            --network ${{ steps.prepare.outputs.container_name }} \
            -e "DB_HOST=mariadb" \
            -e "DB_DATABASE=anonaddy" \
            -e "DB_USERNAME=anonaddy" \
            -e "DB_PASSWORD=anonaddy" \
            -e "APP_KEY=base64:Gh8/RWtNfXTmB09pj6iEflt/L6oqDf9ZxXIh4I9MS7A=" \
            -e "ANONADDY_SECRET=0123456789abcdefghijklmnopqrstuvwxyz" \
            ${{ steps.prepare.outputs.build_tag }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prepare.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prepare.outputs.running_log_check }}"* ]]; then
              echo "🎉 Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prepare.outputs.container_name }} container"
              docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prepare.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prepare.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "❌ Container ${{ steps.prepare.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
            exit 1
          fi
          docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
          echo
